#########################################*JREPLv.1.8 - A READ-EVAL-PRINT-LOOP FOR JAVA*#########################################
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Why?
	A read–eval–print loop (REPL), also known as an interactive toplevel or language shell, is a simple, interactive 
	computer programming environment that takes single user inputs (i.e. single expressions), evaluates them, and returns 	
	the result to the user; a program written in a REPL environment is executed piecewise. 
														      -Wikipedia

	REPLs are great for testing out some logic quickly and consicly. Why waste time compiling something you don't need?
	In java if you need to test a simple for loop or a mere piece of code, it's quite a hassel to create a new file,
	ensuring a valid class name, a main function, etc. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What and How?
	This project is intended to create a read-eval-print-loop for java with some additional features.
	Jrepl intends to create a REPL environment which takes care of some of the less exciting aspects of writing a 
	quick test program in Java by creating and compiling temporary files for you.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Some instructions and notes.
	Most commands use standard java syntax
	To get a quick overview on the custom syntax enter -help in Jrepl
	For example:
		Function declarations:
			:function()
				or
			:<type> function()
					note:
					     only the following types can be used
					     with this syntax:
					     -int
					     -char
					     -double
					     -float
					     -boolean
					     -String
	---------------------------------------------------------------------------------------------------------------------------
	If you make an error while typing in a command, don't worry about it! JRepl will automatically rollback to before you entered 
	that command.
	However, if you make a mistake while declaring a function or a class, there is currently no support to rollback, and hence,
	the program must be restarted or you must manually edit or delete the files functions.java and classes.java.
	Furthermore, all print statements will be deleted after they are run once, but operations, assignments and other functions
	will persist within a session so that you can still use your variable across commands.
	--------------------------------------------------------------------------------------------------------------------------	
	Some features that I may implement in the future:
		*A faster compiling system
		*Cleaner syntax for class and function definitions
		*View command history
		*Better system for handling variables
		*Option to save work to file
		*Support for non-windows platforms
		*Error deletion for functions and classes
Author: Aneesh Durg
	v1.0 made at BoilerMake2015
